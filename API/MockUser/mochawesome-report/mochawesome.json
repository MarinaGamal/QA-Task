{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 4,
    "pending": 0,
    "failures": 2,
    "start": "2023-06-22T22:27:18.949Z",
    "end": "2023-06-22T22:27:19.118Z",
    "duration": 169,
    "testsRegistered": 6,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ab483f98-6518-4eba-93de-dcee694cc5a8",
      "title": "",
      "fullFile": "D:\\MockUser\\api.test.js",
      "file": "\\api.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "97c70af3-7a52-4133-a168-91e00938d257",
          "title": "API Routes",
          "fullFile": "D:\\MockUser\\api.test.js",
          "file": "\\api.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "API Routes should create a new user",
              "timedOut": false,
              "duration": 85,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .post('/api/v1/users')\n  .send({ name: 'mar', email: 'mar@gmail.com', password: '123' });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message', 'User registered with success');\nexpect(response.body).to.have.property('token');",
              "err": {
                "message": "AssertionError: expected { Object (message) } to have property 'token'",
                "estack": "AssertionError: expected { Object (message) } to have property 'token'\n    at Context.<anonymous> (api.test.js:15:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d71054e4-dbcb-4dc6-903f-0c0002741991",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should authenticate a user and return a token",
              "fullTitle": "API Routes should authenticate a user and return a token",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .post('/api/v1/auth')\n  .send({ email: 'mar@gmail.com', password: '123' });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('token');\nauthToken = response.body.token;",
              "err": {},
              "uuid": "aa17ad78-42a3-4e73-b07e-c6c8d93b3586",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a user with authentication",
              "fullTitle": "API Routes should get a user with authentication",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .get('/api/v1/users')\n  .set('Authorization', authToken );\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('id');\nexpect(response.body).to.have.property('name', 'mar');\nexpect(response.body).to.have.property('email', 'mar@gmail.com');\nexpect(response.body).to.have.property('password', '123');\nexpect(response.body).to.have.property('imageUrl', 'https://almsaeedstudio.com/themes/AdminLTE/dist/img/user2-160x160.jpg');",
              "err": {},
              "uuid": "39eed74d-2db7-4a84-a2ea-4a09dfb922d0",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user with authentication",
              "fullTitle": "API Routes should update a user with authentication",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .patch('/api/v1/users')\n  .set('Authorization', authToken)\n  .send({ name: 'newName', email: 'new_email@gmail.com', password: 'newpassword123' });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message', 'User updated with success!');",
              "err": {},
              "uuid": "35ba4333-701b-46a2-99d6-92b12f9e71ab",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user with authentication",
              "fullTitle": "API Routes should delete a user with authentication",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .delete('/api/v1/users')\n  .set('Authorization', authToken);\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message', 'User deleted with success');",
              "err": {
                "message": "AssertionError: expected 403 to equal 200",
                "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (api.test.js:61:32)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 403\n+ 200\n"
              },
              "uuid": "0524da53-e54d-47ff-a1a1-baf05087b4d0",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete all users",
              "fullTitle": "API Routes should delete all users",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request('http://localhost:3000')\n  .delete('/api/v1/all-users')\n  .send({ key_admin: 'keyadmin123' });\nexpect(response.status).to.equal(200);\nexpect(response.body).to.have.property('message', 'Users deleted with success');",
              "err": {},
              "uuid": "586a12c2-2d8c-452f-909d-9cf3eac78408",
              "parentUUID": "97c70af3-7a52-4133-a168-91e00938d257",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa17ad78-42a3-4e73-b07e-c6c8d93b3586",
            "39eed74d-2db7-4a84-a2ea-4a09dfb922d0",
            "35ba4333-701b-46a2-99d6-92b12f9e71ab",
            "586a12c2-2d8c-452f-909d-9cf3eac78408"
          ],
          "failures": [
            "d71054e4-dbcb-4dc6-903f-0c0002741991",
            "0524da53-e54d-47ff-a1a1-baf05087b4d0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}