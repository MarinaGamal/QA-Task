export default apkSigningMethods;
export type CertCheckOptions = {
    /**
     * [true] Whether to require that the destination APK
     * is signed with the default Appium certificate or any valid certificate. This option
     * only has effect if `useKeystore` property is unset.
     */
    requireDefaultCert: boolean;
};
export type KeystoreHash = {
    /**
     * the md5 hash value of the keystore
     */
    md5: string | null;
    /**
     * the sha1 hash value of the keystore
     */
    sha1: string | null;
    /**
     * the sha256 hash value of the keystore
     */
    sha256: string | null;
    /**
     * the sha512 hash value of the keystore
     */
    sha512: string | null;
};
declare namespace apkSigningMethods {
    /**
     * Execute apksigner utility with given arguments.
     *
     * @param {?Array<String>} args - The list of tool arguments.
     * @return {string} - Command stdout
     * @throws {Error} If apksigner binary is not present on the local file system
     *                 or the return code is not equal to zero.
     */
    function executeApksigner(args?: string[] | null): string;
    /**
     * (Re)sign the given apk file on the local file system with the default certificate.
     *
     * @param {string} apk - The full path to the local apk file.
     * @throws {Error} If signing fails.
     */
    function signWithDefaultCert(apk: string): Promise<void>;
    /**
     * (Re)sign the given apk file on the local file system with a custom certificate.
     *
     * @param {string} apk - The full path to the local apk file.
     * @throws {Error} If signing fails.
     */
    function signWithCustomCert(apk: string): Promise<void>;
    /**
     * (Re)sign the given apk file on the local file system with either
     * custom or default certificate based on _this.useKeystore_ property value
     * and Zip-aligns it after signing.
     *
     * @param {string} appPath - The full path to the local .apk(s) file.
     * @throws {Error} If signing fails.
     */
    function sign(appPath: string): Promise<void>;
    /**
     * Perform zip-aligning to the given local apk file.
     *
     * @param {string} apk - The full path to the local apk file.
     * @returns {boolean} True if the apk has been successfully aligned
     * or false if the apk has been already aligned.
     * @throws {Error} If zip-align fails.
     */
    function zipAlignApk(apk: string): boolean;
    /**
     * @typedef {Object} CertCheckOptions
     * @property {boolean} requireDefaultCert [true] Whether to require that the destination APK
     * is signed with the default Appium certificate or any valid certificate. This option
     * only has effect if `useKeystore` property is unset.
     */
    /**
     * Check if the app is already signed with the default Appium certificate.
     *
     * @param {string} appPath - The full path to the local .apk(s) file.
     * @param {string} pgk - The name of application package.
     * @param {CertCheckOptions} opts - Certificate checking options
     * @return {boolean} True if given application is already signed.
     */
    function checkApkCert(appPath: string, pkg: any, opts?: CertCheckOptions): boolean;
    /**
     * @typedef {Object} KeystoreHash
     * @property {?string} md5 the md5 hash value of the keystore
     * @property {?string} sha1 the sha1 hash value of the keystore
     * @property {?string} sha256 the sha256 hash value of the keystore
     * @property {?string} sha512 the sha512 hash value of the keystore
     */
    /**
     * Retrieve the the hash of the given keystore.
     *
     * @return {KeystoreHash}
     * @throws {Error} If getting keystore hash fails.
     */
    function getKeystoreHash(): KeystoreHash;
}
//# sourceMappingURL=apk-signing.d.ts.map